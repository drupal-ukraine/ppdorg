<?php

/**
 * @file
 * Uninstall routines for ppgetstat module.
 */

/**
 * Implements hook_schema().
 */
function ppgetstat_schema() {
  $schema['ppgetstat'] = array(
    'description' => 'Stores statistics about user.',
    'fields' => array(
      'id'  => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: id of the record.',
      ),
      'doid'  => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Drupal.org user id.',
      ),
      'items' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Number of items for this week.',
      ),
      'type' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Type of items.',
      ),
      'timestamp' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'First day of the week we are checking the stats.',
      ),
      'hash' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => 'undefined',
        'description' => 'Hash for filtering out possible duplicates.',
      ),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function ppgetstat_install() {
  $directory = file_default_scheme() . '://page_cache';
  if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
    watchdog('ppgetstat', 'Can\'t create page cache directory %dir.', array('%dir' => $directory), WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_uninstall().
 */
function ppgetstat_uninstall() {
  $vars = db_delete('variable');
  $vars = $vars->condition('name', 'ppgetstat%', 'LIKE');
  $vars->execute();
}

/**
 * Add new column to the ppgetstat table.
 */
function ppgetstat_update_7001() {

 $spec = array(
    'type' => 'int',
    'description' => 'A link to the main user group taxonomy term',
    'not null' => FALSE,
  );
  db_add_field('ppgetstat', 'user_group_tid', $spec);
}

/**
 *  Add right ud_tid values to the ppgetstat table.
 */
function ppgetstat_update_7002(&$sandbox) {
   if (!isset($sandbox['total'])) {
      $sandbox['total'] = db_select('ppgetstat', 'p')->countQuery()->execute()->fetchField();
      $sandbox['current'] = 0;
    }
    $items_per_page = 50;
    $query = db_select('ppgetstat', 'p')
      ->fields('p', array('id', 'doid'))
      ->range($sandbox['current'], $items_per_page)
      ->execute()
      ->fetchAll();
    $ids_map = $doids = array();
    foreach ($query as $item) {
      $ids_map[$item->id] = $item->doid;
      $doids[] = $item->doid;
    }

    $mapping_query = db_select('field_data_field_user_id', 'fdoid');
    $mapping_query->innerJoin('field_data_field_user_lists', 'ful', 'fdoid.entity_id = ful.entity_id');
    $mapping_query->fields('fdoid', array('field_user_id_value'));
    $mapping_query->fields('ful', array('field_user_lists_tid'));
    $mapping_query->condition('fdoid.field_user_id_value', array_unique($doids), 'IN');
    $map_result = $mapping_query->execute()->fetchAll();
    foreach ($map_result as $item) {
      $ids_map_result[$item->field_user_id_value] = $item->field_user_lists_tid;
    }

    foreach ($ids_map as $ppgetstat_id => $ppgetstat_doid) {
      db_update('ppgetstat')
        ->fields(array('user_group_tid' => $ids_map_result[$ppgetstat_doid]))
        ->condition('id', $ppgetstat_id)
        ->execute();
      $sandbox['current']++;
    }

    $sandbox['#finished'] = ($sandbox['current'] / $sandbox['total']);
    if ($sandbox['#finished'] === 1) {
      drupal_set_message(t('Ppgetstat items updated: @items.',
        array('@items' => $sandbox['total'])));
    }
}
