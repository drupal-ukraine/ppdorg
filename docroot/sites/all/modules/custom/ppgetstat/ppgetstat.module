<?php

/**
 * @file
 * Drupal.org statistics routines.
 */
define('PPGETSTAT_USER_NODE_TYPE', 'user');
// Number of users queued to be scanned per cron run.
define('PPGETSTAT_STATSJOBS_PROCESS_NUMBER', 250);
// Number of calls to drupal.org per cron run.
define('PPGETSTAT_DORGSCRAPPING_PROCESS_NUMBER', 270);
// If no stats available we scan commits for last 12 years.
define('PPGETSTAT_DEFAULT_TIME_PERIOD_FOR_SCANNING', variable_get('ppgetstat_stats_period', 12 * 12 * 30 * 24 * 60 * 60));
// We group statistics per week.
define('PPGETSTAT_TIME_PERIOD_GRANULARITY', 7 * 24 * 60 * 60);
// Commmits type of data.
define('PPGETSTAT_TYPE_COMMITS', 1);
// Page cache expiry time.
define('PPGETSTAT_PAGE_CACHE_EXPIRY', 4 * 60 * 60);
// Quantification of the statjob queue tasks
define('PPGETSTAT_STAT_JOB_QUANTIFICATION', 20);

/**
 * Implements hook_menu().
 */
function ppgetstat_menu() {
  $items['node/%node/commits'] = array(
    'title' => 'Commits',
    'description' => 'Commits statistics.',
    'page callback' => 'ppgetstat_commits_page',
    'page arguments' => array(1),
    'access callback' => 'ppgetstat_commits_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ppgetstat.pages.inc',
  );

  $items['node/%node/commits/data.tsv'] = array(
    'title' => 'Commits Tsv',
    'description' => 'Commits statistics.',
    'page callback' => 'ppgetstat_commits_tsv_source',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'ppgetstat.pages.inc',
  );

  $items['admin/config/services/ppgetstat-reset'] = array(
    'title' => 'Reset all statistics',
    'description' => 'Clear all statistics.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ppgetstat_reset_form'),
    'access arguments' => array('administer site configuration'),
    'weight' => -21,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ppgetstat.pages.inc',
  );

  $items['admin/config/services/sync_user_list'] = array(
    'title' => 'Start sync task from Drupal.org',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ppgetstat_sync_user_list'),
    'access arguments' => array('administer site configuration'),
    'weight' => -21,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ppgetstat.pages.inc',
  );

  $items['admin/config/services/restart_country_scan'] = array(
    'title' => 'Restart country scan',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ppgetstat_rescan'),
    'access arguments' => array('administer site configuration'),
    'weight' => -21,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ppgetstat.pages.inc',
  );

  return $items;
}

/**
 * Get drupal.org user ID using nickname and http://dgo.to.
 *
 * @param string $nick
 *   Nickname.
 *
 * @return int
 *   Drupal.org user id.
 */
function ppgetstat_get_id_by_nick($nick) {
  if ($id_cached = cache_get('ppgetstat_nick_' . $nick)) {
    return $id_cached->data;
  }
  $nick_data = drupal_http_request('http://dgo.to/@' . $nick);
  $request = parse_url($nick_data->redirect_url);
  $id_data = explode("/", $request['path']);
  $id = $id_data[2];

  if (!is_numeric($id)) {
    return FALSE;
  }

  cache_set('ppgetstat_nick_' . $nick, $id);

  return $id;
}

/**
 * Get drupal.org user Nickname using uid and https://www.drupal.org/user/.
 *
 * @param string|int $id
 *   User drupal.org Id.
 *
 * @return bool|string
 *   User drupal.org nickname or FALSE if not user was found.
 */
function ppgetstat_get_nick_by_id($id) {
  $userdata = drupal_http_request('https://www.drupal.org/user/' . $id);

  if ($userdata->code > 400) {
    return FALSE;
  }

  preg_match('/\<h1 id\=\"page-title\" class\=\"title\"\>(.+)\<\/h1\>/', $userdata->data, $match);

  return (!empty($match[1]) ? $match[1] : FALSE);
}

/**
 * Implements hook_cron().
 */
function ppgetstat_cron() {
  $time_pre = microtime(TRUE);

  //Start users sync process with d.org
  $cron_create_users_queue = _ppgetstat_cron_create_users_queue();

  //Process step of sync process.
  $cron_process_user_queue = _ppgetstat_cron_process_users_queue();

  // Create items in stats_jobs queue.
  if (!$cron_create_users_queue || !$cron_process_user_queue) {
    $cron_create_stats_jobs = _ppgetstat_cron_createItem_stats_jobs();
    // If new scan jobs are not created, we could run process jobs.
    if (!$cron_create_stats_jobs) {
    // Process items from stats_jobs queue.
    _ppgetstat_cron_processItem_stats_jobs();

    // Process items from stats_jobs queue.
    _ppgetstat_cron_processItem_dorg_scrapping_jobs();
    }
  }
  // Remove expired cached pages.
  _ppgetstat_cron_remove_cached_pages();

  $time_post = microtime(TRUE);
  $exec_time = round($time_post - $time_pre, 2);
  watchdog('ppgetstat_cron', $exec_time . 's ');

}

/**
 * If period has passed, start rescan of available users list.
 */
function _ppgetstat_cron_create_users_queue($force = FALSE, $scan_term = NULL) {

  $last_cron_run = variable_get('ppgetstat_last_users_rescan_timestamp', 0);
  // we are running users lists rescan each 12 days.
  if ((12*24*60*60 >= (REQUEST_TIME - $last_cron_run)) && (!$force)) {
    return 0;
  }

  $queue = DrupalQueue::get('ppgetstat_users_scan');
  $queue->createQueue();
  if (empty($scan_term)) {
    $vocab = taxonomy_vocabulary_machine_name_load('users_list');
    $terms = taxonomy_get_tree($vocab->vid);
  } else {
    $terms = array($scan_term);
  }
  foreach ($terms as $t) {
    $term = taxonomy_term_load($t->tid);
    $field_query = field_get_items('taxonomy_term', $term, 'field_query');
    if (!empty($field_query)) {
      $variables = array();
      foreach ($field_query as $item) {
        $variables[$item['first']] = urlencode($item['second']);
      }
      $r = _ppgetstat_api_call('https://www.drupal.org/','api-d7/user.json', $variables);
      $last_url = parse_url($r->last);
      parse_str($last_url['query'], $params);
      for ($i = $params['page']; $i >= 0; $i--) {
        $queue->createItem(array(
          $variables, $i, $term->tid
        ));
      }
    }
  }
  variable_set('ppgetstat_last_users_rescan_timestamp', REQUEST_TIME);
  return 1;
}

/**
 * Process users queue
 */
function _ppgetstat_cron_process_users_queue() {
  $last_cron_run = variable_get('ppgetstat_last_users_process_timestamp');
  // we are running users lists rescan each 5 minutes.
  if ($last_cron_run > REQUEST_TIME - 4 * 60) {
    return 0;
  }

  $queue = DrupalQueue::get('ppgetstat_users_scan');
  if ($queue->NumberOfItems() > 0) {
    $item = $queue->claimItem();
    if (!empty($item)) {
      $variables = $item->data[0];
      $page = $item->data[1];
      $tid = $item->data[2];
      _ppgetstat_sync_user_list_step($variables, $page, $tid);
      $queue->deleteItem($item);
    }
    return 1;
  } else {
    $queue->DeleteQueue();
    return 0;
  }

  variable_set('ppgetstat_last_users_process_timestamp', REQUEST_TIME);

}

/**
 * If period has passed, scan each user's commits.
 */
function _ppgetstat_cron_createItem_stats_jobs() {
  $last_cron_run = variable_get('ppgetstat_last_statsjobs_timestamp');
  // We are rescaning ech user commit every 5 days.
  // @TODO make this feature configurable at the admin panel.
  // @TODO add ability to force this and run rescan from admin panel.
  if ($last_cron_run > REQUEST_TIME - 5 * 24 * 60 * 60) {
    watchdog('ppgetstat_info', 'Skiping create_item_stats_job because it is to early');
    return 0;
  }

  $queue = DrupalQueue::get('stats_jobs');
  $scan_users = array();
  foreach (_ppgetstats_get_all_users() as $nid => $doid) {
    $scan_users[] = array(
      'nid' => $nid,
      'doid' => $doid,
    );
  }

  $quant = array_chunk($scan_users, PPGETSTAT_STAT_JOB_QUANTIFICATION);
  foreach ($quant as $items) {
    // Invoke hook so all modules can use it to provide jobs.
    foreach (module_implements('ppgetstat_stats_job') as $module) {
      $jobs = module_invoke($module, 'ppgetstat_stats_job', $items);
      if (!empty($jobs)) {
        foreach ($jobs as $job) {
          $queue->createItem($job);
        }
      }
    }
  }

  variable_set('ppgetstat_last_statsjobs_timestamp', REQUEST_TIME);

  return 1;
}

/**
 * Implements hook_ppgetstat_stats_job().
 */
function ppgetstat_ppgetstat_stats_job(array $users, $force = FALSE) {

  $job = array();

  foreach ($users as $user) {
    $doid = $user['doid'];
    $last_scan_week = db_query('SELECT timestamp FROM {ppgetstat} WHERE doid = :doid AND type = :type ORDER BY timestamp DESC LIMIT 1',
      array(':doid' => $doid, ':type' => PPGETSTAT_TYPE_COMMITS)
    )->fetchField();

    $last_commit_timestamp = variable_get('ppgetstat_ppgetstat_last_commit_timestamp', array($doid => array()));
    $last_commit_timestamp[$doid] = array($last_scan_week => 0);
    //@TODO Rim this, because filtering is already exist at _ppgetstat_cron_createItem_stats_jobs().
    $last_scan = max(array(
      REQUEST_TIME - PPGETSTAT_DEFAULT_TIME_PERIOD_FOR_SCANNING,
      $last_commit_timestamp[$doid][$last_scan_week],
    ));

    if (!$force) {
      if ($last_scan > REQUEST_TIME - 24 * 60 * 60) {
        return;
      }
    }
    $job[] = array(
      'generate_urls_callback' => '_ppgetstat_get_code_tracking_urls',
      'parse_pages_callback' => '_ppgetstat_parse_commits',
      'doid' => $doid,
      'last_scan' => $last_scan,
    );

  }

  return $job;
}

/**
 * Process jobs from stats_jobs queue.
 */
function _ppgetstat_cron_processItem_stats_jobs() {
  $stats_jobs_queue = DrupalQueue::get('stats_jobs');
  $dorg_scrapping_queue = DrupalQueue::get('dorg_scrapping');
  for ($i = 0; $i < PPGETSTAT_STATSJOBS_PROCESS_NUMBER; $i++) {
    if ($stats_jobs_queue->numberOfItems() == 0) {
      break;
    }
    $item = $stats_jobs_queue->claimItem();
    if ($item == FALSE) {
      break;
    }

    $generate_urls_function = $item->data['generate_urls_callback'];
    if (!function_exists($generate_urls_function)) {
      watchdog('ppgetstat_error', 'generate_urls_callback ":generate_urls_callback" is not defined.', array(
        ':generate_urls_callback' => $generate_urls_function,
      ), WATCHDOG_ERROR);
      return;
    }
    if (!empty($generate_urls_function)) {
      $data = $generate_urls_function($item->data);
      if (!empty($data)) {
        foreach ($generate_urls_function($item->data) as $url) {
          // We keep the id of the stats_jobs queue to group all dorg_scrapping jobs.
          $scrapping_job = array(
            'id' => $item->item_id,
            'url' => $url,
            'data' => $item->data,
            'parse_pages_callback' => $item->data['parse_pages_callback'],
          );
          $dorg_scrapping_queue->createItem($scrapping_job);
        }
      }
    }

    $stats_jobs_queue->deleteItem($item);
  }
}

/**
 * Get all published user nodes.
 */
function _ppgetstats_get_all_users() {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', PPGETSTAT_USER_NODE_TYPE)
    ->propertyCondition('status', 1)
    ->execute();
  $query = db_select('node', 'n');
  $query->innerJoin('field_data_field_user_id', 'fu', 'n.nid=fu.entity_id');
  $query->fields('n', array('nid'));
  $query->fields('fu', array('field_user_id_value'));
  $result = $query->execute()->fetchAll();
  if (!empty($result)) {
    $return = array();
    foreach ($result as $item) {
      $return[$item->nid] = $item->field_user_id_value;
    }
    return $return;
  } else {
    return array();
  }

}

/**
 * Helper function that gets current project ids by d.org ids.
 * @param array $doids
 * @return assoc array with drupal.org id => $user node object.
 */
function _ppgetstat_get_users_by_doids($doids) {

  if (empty($doids)) {
    return;
  }
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', PPGETSTAT_USER_NODE_TYPE)
    ->propertyCondition('status', 1)
    ->fieldCondition('field_user_id', 'value', $doids, 'IN')
    ->execute();

  if (empty($result)) {
    return;
  }

  $nids = array_keys($result['node']);
  $nodes = node_load_multiple($nids);
  $r = array();

  foreach ($nodes as $node) {
    $field_user_id = field_get_items('node', $node, 'field_user_id');
    $r[$field_user_id[0]['value']] = $node;
  }

  return $r;
}

/**
 * Get the user's node link by drupal.org id.
 */
function _ppgetstat_get_node_link_by_doid($doid) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', PPGETSTAT_USER_NODE_TYPE)
    ->propertyCondition('status', 1)
    ->fieldCondition('field_user_id', 'value', $doid)
    ->execute();
  if (empty($result)) {
    return;
  }
  $result_keys = array_keys($result['node']);
  $nid = reset($result_keys);

  $node = node_load($nid);

  return l($node->title, 'node/' . $nid);
}

/**
 * Generate list of URLs for scanning the code.
 */
function _ppgetstat_get_code_tracking_urls($data) {
  $last_scan = $data['last_scan'];

  $doids = array($data['doid']);

  // Number of pages to scan before check it is empty.
  $pages_block = 7;
  $urls = array();
  //@TODO after quantification
  foreach ($doids as $doid) {
    $first_url = 'https://drupal.org/user/' . urlencode($doid) . '/track/code?page=0';
    $content = _ppgetstat_fetch_page($first_url);
    $start = 0;
    if (strpos($content, 'commitlog')) {
      for ($i = $start; $i <= ($start + $pages_block); $i++) {
        if ($i == ($start + $pages_block)) {
          $first_url = 'https://drupal.org/user/' . urlencode($doid) . '/track/code?page=' . $i;
          $content = _ppgetstat_fetch_page($first_url);
          if (!strpos($content, 'commitlog')) {
            return $urls;
          }
          else {
            $start = $start + $pages_block;
          }
        }
        $urls[] = 'https://drupal.org/user/' . urlencode($doid) . '/track/code?page=' . $i;
      }
    }
  }
  return $urls;
}

/**
 * Process jobs from dorg_scrapping queue.
 */
function _ppgetstat_cron_processItem_dorg_scrapping_jobs() {
  $dorg_scrapping_queue = DrupalQueue::get('dorg_scrapping');
  for ($i = 0; $i < PPGETSTAT_DORGSCRAPPING_PROCESS_NUMBER; $i++) {
    $queue_item = $dorg_scrapping_queue->claimItem();
    if ($queue_item == FALSE) {
      return;
    }

    $function = $queue_item->data['parse_pages_callback'];
    if (!function_exists($function)) {
      watchdog('ppgetstat', 'parse_pages_callback ":parse_pages_callback" is not defined.', array(
        ':parse_pages_callback' => $function,
      ), WATCHDOG_ERROR);
      return;
    }

    $page_content = _ppgetstat_fetch_page($queue_item->data['url']);

    try {
      $result = $function($page_content, $queue_item->data['data']);
    }
    catch (Exception $e) {
      watchdog_exception('ppgetstat_error', $e);
      $result = FALSE;
    }

    if ($result === FALSE) {
      _ppgetstat_cleanup_dorg_scrapping_queue($queue_item->data['id']);
    }

    if (!empty($result)) {
      _ppgetstat_save_counters($result, $queue_item->data['data']['doid']);
    }

    $dorg_scrapping_queue->deleteItem($queue_item);
  }
}

/**
 * Cleanup the dorg_scrapping queue.
 */
function _ppgetstat_cleanup_dorg_scrapping_queue($id) {
  $dorg_scrapping_queue = DrupalQueue::get('dorg_scrapping');
  while ($queue_item = $dorg_scrapping_queue->claimItem()) {
    if ($queue_item->data['id'] == $id) {
      $dorg_scrapping_queue->deleteItem($queue_item);
    }
    else {
      $dorg_scrapping_queue->releaseItem($queue_item);
      return;
    }
  }
}

/**
 * Retrieve content of the page.
 *
 * @param string $url
 *   URL of the page to retrieve.
 */
function _ppgetstat_fetch_page($url) {
  $time_pre = microtime(TRUE);

  // This hack should be debugged. Can't really find where improper url generated.
  $url = preg_replace("/comment\?/", "comment.json?", $url);
  $url = preg_replace("/comment.json\?name=/", "comment.json?author=", $url);
  $filename = preg_replace("/[^A-Za-z0-9]/", '-', $url) . '.html';
  $filepath = file_default_scheme() . '://page_cache/' . $filename;
  $cache = cache_get($filepath);
  $content = isset($cache->data) ? $cache->data : NULL;
  if (!$content) {
    if (file_exists($filepath)) {
      $url = $filepath;
    }

    $content = file_get_contents($url);

    if ($url != $filepath) {
      if (file_put_contents($filepath, $content) === FALSE) {
        watchdog('ppgetstat', 'Can\'t write cache file %file.', array('%file' => $filepath), WATCHDOG_ERROR);
      }
      else cache_set($filepath, $content);
    }
  }


  $time_post = microtime(TRUE);
  $exec_time = round($time_post - $time_pre, 2);
  watchdog('_ppgetstat_fetch_page', $exec_time . 's ' . $url);
  return $content;
}

/**
 * Remove expired cached pages.
 */
function _ppgetstat_cron_remove_cached_pages() {
  $cache_directory = drupal_realpath(file_default_scheme() . '://page_cache');
  $files = glob($cache_directory . '/*');
  foreach ($files as $file) {
    if (is_file($file)) {
      if (REQUEST_TIME - filemtime($file) >= PPGETSTAT_PAGE_CACHE_EXPIRY) {
        unlink($file);
      }
    }
  }
}

/**
 * Parse the page for the commits.
 */
function _ppgetstat_parse_commits($page_content, $data) {
  $last_scan = $data['last_scan'];
  if (empty($page_content)) {
    throw new Exception('Empty page content.');
  }

  // Extract string with project name and date of the commit.
  // Example: <h3><a href="/project/apachesolr">Apache Solr Search</a>: <a href="/commitlog/commit/4838/9d8d6276d4246a0d2651b00bbd05786baa1324c9">October 7, 2013 20:40</a></h3>
  $strings = htmlqp($page_content, '.commit-global h3');

  if (empty($strings)) {
    throw new Exception(t('Page does not have any ".commit-global h3" elements.'));
  }

  $first_commit_timestamp = TRUE;
  $commits_counter_array = array();
  $commits_counter = 0;

  foreach ($strings as $string) {
    $html = $string->html();
    $commit_timestamp = _ppgetstat_parse_commits_page_date($html);
    $commit_hash = _ppgetstat_parse_commits_page_hash($html);
    if ($commit_timestamp <= $last_scan) {
      break;
    }

    $period_timestamp = $commit_timestamp - ($commit_timestamp % PPGETSTAT_TIME_PERIOD_GRANULARITY);
    $last_commits = variable_get('ppgetstat_ppgetstat_last_commit_timestamp', array($data['doid'] => array($period_timestamp => 0)));

    // Save latest commit's date per week into variable.
    if ($first_commit_timestamp || empty($last_commits[$data['doid']][$period_timestamp])) {
      $first_commit_timestamp = FALSE;

      if (empty($last_commits[$data['doid']][$period_timestamp]) || $commit_timestamp > $last_commits[$data['doid']][$period_timestamp]) {
        $last_commits[$data['doid']][$period_timestamp] = $commit_timestamp;
        variable_set('ppgetstat_ppgetstat_last_commit_timestamp', $last_commits);
      }
    }

    if (!isset($commits_counter_array[$period_timestamp])) {
      // $commits_counter_array[$period_timestamp] = 0;
    }
    $commits_counter_array[$period_timestamp][] = $commit_hash;
    $commits_counter++;
  }

  // FALSE means stop scrapping any other pages anymore.
  if ($commits_counter == 0) {
    return FALSE;
  }

  $commits_counter_array['#type'] = PPGETSTAT_TYPE_COMMITS;

  return $commits_counter_array;
}

/**
 * Save counters to database.
 */
function _ppgetstat_save_counters($counters_array, $doid) {
  $type = $counters_array['#type'];
  unset($counters_array['#type']);
  $query = db_select('field_data_field_user_id', 'fdoid');
  $query->innerJoin('field_data_field_user_lists', 'fl', 'fdoid.entity_id = fl.entity_id');
  $query->condition('fdoid.field_user_id_value', $doid);
  $query->fields('fl', array('field_user_lists_tid'));
  $user_group_tid = $query->execute()->fetchField();

  foreach ($counters_array as $period => &$commits) {
    foreach ($commits as &$hash) {
      db_merge('ppgetstat')
        ->key(array('doid' => $doid, 'hash' => $hash))
        ->fields(array(
          'type' => $type,
          'timestamp' => $period,
          'items' => 1,
          'user_group_tid' => $user_group_tid
        ))
        ->execute();
    }

  }
}

/**
 * Parse string '<h3><a href="/project/apachesolr">Apache Solr Search</a>: <a href="/commitlog/commit/4838/9d8d6276d4246a0d2651b00bbd05786baa1324c9">October 7, 2013 20:40</a></h3>'.
 */
function _ppgetstat_parse_commits_page_date($original_string) {
  list(, $string) = explode('a>: <a href', $original_string);

  // Cut off remainig part of the link tag in the beginning.
  $string = substr($string, strpos($string, '>') + 1);
  // Remove "</a></h3>" from the end of the string.
  $string = substr($string, 0, strlen($string) - 9);

  $timestamp = strtotime($string);

  if (empty($timestamp)) {
    throw new Exception(t('Cannot parse string %string to timestamp.', array('%string' => $original_string)));
  }
  return $timestamp;
}

/**
 * Parse string '<h3><a href="/project/apachesolr">Apache Solr Search</a>: <a href="/commitlog/commit/4838/9d8d6276d4246a0d2651b00bbd05786baa1324c9">October 7, 2013 20:40</a></h3>'.
 */
function _ppgetstat_parse_commits_page_hash($original_string) {

  preg_match("/.*\/commitlog\/commit\/.*\/(.*)\">/", $original_string, $match);
  if (!isset($match[1])) {
    throw new Exception(t('Cannot parse string %string to get commit hash.', array('%string' => $original_string)));
  }

  return $match[1];
}

/**
 * Access callback for commits tab.
 */
function ppgetstat_commits_access($node) {
  return ($node->type == PPGETSTAT_USER_NODE_TYPE);
}

/**
 * Add d3.js only once.
 */
function _ppgetstat_add_d3_js() {
  $added = &drupal_static(__FUNCTION__);
  if (!$added) {
    drupal_add_js(drupal_get_path('module', 'ppgetstat') . '/js/d3.min.js');
    $added = TRUE;
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ppgetstat_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_node_insert().
 *
 * Trigger scanning jobs for newly created user.
 */
function ppgetstat_node_insert($node) {
  if ($node->type != PPGETSTAT_USER_NODE_TYPE) {
    return;
  }
  if (!isset($node->field_user_id[LANGUAGE_NONE][0]['value'])) {
    return;
  }
  $queue = DrupalQueue::get('stats_jobs');
  // Invoke hook so all modules can use it to provide jobs.
  foreach (module_implements('ppgetstat_stats_job') as $module) {
    $job = module_invoke($module, 'ppgetstat_stats_job', $node);
    if (!empty($job)) {
      $queue->createItem($job);
    }
  }

  // Queue scanning jobs.
  _ppgetstat_cron_processItem_stats_jobs();
}

/**
 * JSON call
 * @param $site
 * @param $endpoint
 * @param $vars
 * @param int $page
 * @return mixed
 */
function _ppgetstat_api_call($site, $endpoint, $vars, $page = 0) {

  $url = $site . $endpoint;
  if (!empty($vars)) {
    $url .= '?';
    $variables = array();
    foreach ($vars as $key => $value) {
      if (is_array($value)) {
        $value = implode('%2C', $value);
      }
      $variables[] = $key . '=' . $value;
    }
    $url .= implode('&', $variables);
  }
  if (!empty($page)) {
    $url .= '&page=' . $page;
  }

  $request = drupal_http_request($url, array('timeout' => 3000));
  if ($request->code == 200) {
    $JSON = $request->data;
  } else {
    $JSON = NULL;
  }

  return json_decode($JSON);
}

/**
 * Batch step function for syncing user list.
 */
function _ppgetstat_sync_user_list_step($variables, $page, $tid) {
  for ($i = 0; $i < 10; $i++) {
    $r = _ppgetstat_api_call(
      'https://www.drupal.org/',
      'api-d7/user.json',
      $variables,
      $page
    );
    if (!empty($r)) {
      break;
    }
    // wait for next 10 seconds to retry.
    sleep(10);
  }

  if (!empty($r)) {
    $list = $r->list;
    $users_data = $uids = array();

    foreach ($list as $item) {
      $uids[] = $item->uid;
      $users_data[$item->uid] = $item;
    }

    // Process list and add/update user nodes.
    _ppgetstat_process_dorg_users($users_data, $uids, $tid);

  } else {
    watchdog('ppdorg_debug', 'Request returned error');
  }

}

/**
 * Helper function that is checking - is existed user changed or not.
 * We are using this function for next purposes:
 * - avoid hard node_save action without any new information;
 * - write new revision for understanding differenced between user data now and
 * in the past.
 * @param $old
 * @param $new
 * @param $params_to_scan
 */
function _ppgetstat_node_diff($old, $new, $params_to_scan) {
  if (!empty($params_to_scan)) {
    foreach ($params_to_scan as $param) {
      $old_value = $old->{$param};
      $new_value = $new->{$param};
      if (is_array($old_value) && (is_array($new_value))) {

        if (strcmp(serialize($old_value), serialize($new_value)) != 0) {
          return TRUE;
        } else {
          return FALSE;
        }
      } else {
        if ($old_value != $new_value) {
          return TRUE;
        } else {
          return FALSE;
        }
      }
    }
  } else {
    // If we dont have plan to compare - thinking that new node has new info.
    return TRUE;
  }
}
/**
 * Helper function that process d.org users list and add/update that object to
 * user nodes.
 * @param $users_data
 * @param $doids
 * @throws \Exception
 */
function _ppgetstat_process_dorg_users($users_data, $doids, $tid) {
  $existed_users_query = db_select('field_data_field_user_id', 'u')
    ->fields('u', array('entity_id','field_user_id_value'))
    ->condition('u.field_user_id_value', $doids, 'IN')
    ->execute()
    ->fetchAll();
  $existed_users = array();
  foreach ($existed_users_query as $item) {
    $existed_users[$item->field_user_id_value] = $item->entity_id;
  }

  foreach ($doids as $uid) {
    // If user is not tracked yet - creating new empty node.
    if (!array_key_exists($uid, $existed_users)) {
      $node = new stdClass();
      $node->type = 'user';
      node_object_prepare($node);
    } else {
     $old_node =  $node = node_load($existed_users[$uid]);
    }

    $node->title = $users_data[$uid]->name;
    $node->field_user_lists[LANGUAGE_NONE] = array(array('tid' => $tid));
    $node->field_registered_at[LANGUAGE_NONE] = array(array('value' => $users_data[$uid]->created));
    $node->field_user_id[LANGUAGE_NONE] = array(array(
      'value' => $uid,
    ));

    $user_mentors = $users_data[$uid]->field_mentors;
    if (!empty($user_mentors)) {
      $node->field_mentors[LANGUAGE_NONE] = array();
      foreach ($user_mentors as $mentor) {
        $node->field_mentors[LANGUAGE_NONE][] = array(
          'value' => $mentor->id,
        );
      }
    }

    $user_organizations = $users_data[$uid]->field_organizations;
    if (!empty($user_organizations)) {
      $org_name = array();
      $org_title = array();
      foreach ($user_organizations as $org)  {
        $collection_request = drupal_http_request($org->uri. '.json');
        if ($collection_request->code == 200) {
          $collection_data = json_decode($collection_request->data);
          $org_name[] = $collection_data->field_organization_name;
          $org_title[] = $collection_data->field_job_title;
        }
      }
      // Processing user companies.
      $node->field_organisations[LANGUAGE_NONE] = array();
      foreach ($org_name as $on) {
        $node->field_organisations[LANGUAGE_NONE][] = _ppgetstat_vocab_term_tid($on, 'company');
      }
      // Processing user job titles.
      $node->field_job_titles[LANGUAGE_NONE] = array();
      foreach ($org_title as $ot) {
        $node->field_job_titles[LANGUAGE_NONE][] = _ppgetstat_vocab_term_tid($ot, 'job_title');
      }
    }

    if (!empty($node->nid)) {
      if (_ppgetstat_node_diff($old_node, $node,
        array(
          'field_job_titles',
          'field_organisations',
          'field_mentors',
          'title'
        )
      )) {
        // Uf user has updated something at profile - adding new revision.
        $node->revision = 1;
        $node->log = 'User rescan: ' . date('Y-m-d H:i');
        watchdog('dorg_users_import', 'Updating user @user', array('@user'=> l($node->title, 'node/' . $node->nid)));
        node_save($node);
      }
    } else {
      node_save($node);
      watchdog('dorg_users_import', 'Adding new user @user', array('@user'=> l($node->title, 'node/' . $node->nid)));

    }

  }
}

/**
 * Helper function that generates term id for adding it to user CT term references.
 */
function _ppgetstat_vocab_term_tid($name, $vocab_name) {
  $vocab = taxonomy_vocabulary_machine_name_load($vocab_name);
  $tid = db_select('taxonomy_term_data', 't')
    ->fields('t', array('tid'))
    ->condition('t.vid', $vocab->vid)
    ->condition('t.name', trim(strtolower($name)))
    ->execute()
    ->fetchField();

  if (!empty($tid)) {
    return array(
      'tid' => $tid,
    );
  } else {

    return array(
      'vid' => $vocab->vid,
      'tid' => 'autocreate',
      'name' => trim(strtolower($name)),
    );
  }
}

/**
 * Helper function that get info about individual membership.
 */
function _ppgetstat_get_individual_members() {
  $assoc_result = cache_get('pp_frontpage_assoc_members');
  if (empty($assoc_result)) {
    $r = _ppgetstat_api_call('https://assoc.drupal.org/', 'api/association_members.json', array());
    $members_stat = array();
    $members_stat['members_country_count'] = array();
    $members_stat['members_country'] = array();
    foreach ($r->users as $temp) {
      $user = $temp->user;
      $user->Country = trim($user->Country);
      if (empty($user->Country) || ($user->Country == 1)) {
        $user->Country = 'COUNTRY_NOT_DEFINED';
      }
      isset($members_stat['members_country_count'][$user->Country]) ? $members_stat['members_country_count'][$user->Country] += 1 : $members_stat['members_country_count'][$user->Country] = 0;
      $members_stat['members_country'][$user->Country][] = $user->user_name;
    }
    array_multisort($members_stat['members_country_count'], SORT_DESC,  SORT_NUMERIC);
    cache_set('pp_frontpage_assoc_members', $members_stat);
  } else {
    $members_stat = $assoc_result->data;
  }
  return $members_stat;
}

/**
 * Finish callback for batch process.
 */
function _ppgetstat_batch_finished() {
  drupal_set_message('Users import finished');
}
