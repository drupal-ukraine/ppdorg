<?php

/**
 * @file
 * Drupal.org statistics routines.
 */
define('PPGETSTAT_USER_NODE_TYPE', 'user');
// Number of users queued to be scanned per cron run.
define('PPGETSTAT_STATSJOBS_PROCESS_NUMBER', 100);
// Number of calls to drupal.org per cron run.
define('PPGETSTAT_DORGSCRAPPING_PROCESS_NUMBER', 800);
// Hours, minutes, seconds.
define('PPGETSTAT_TIME_DAY_GRANULARITY', 24 * 60 * 60);
// Week timestamp.
define('PPGETSTAT_TIME_WEEK_GRANULARITY', 7 * PPGETSTAT_TIME_DAY_GRANULARITY);
// Month timestamp.
define('PPGETSTAT_TIME_MONTH_GRANULARITY', 30 * PPGETSTAT_TIME_DAY_GRANULARITY);
// If no stats available we scan commits for last half a year.
define('PPGETSTAT_DEFAULT_TIME_PERIOD_FOR_SCANNING', ppgetstat_stats_period());
// Commits type of data.
define('PPGETSTAT_TYPE_COMMITS', 1);
// Page cache expiry time.
define('PPGETSTAT_PAGE_CACHE_EXPIRY', 6 * 60 * 60);

/**
 * Implements hook_menu().
 */
function ppgetstat_menu() {
  $items['node/%node/commits'] = array(
    'title' => 'Commits',
    'description' => 'Commits statistics.',
    'page callback' => 'ppgetstat_commits_page',
    'page arguments' => array(1),
    'access callback' => 'ppgetstat_commits_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ppgetstat.pages.inc',
  );

  $items['node/%node/commits/data.tsv'] = array(
    'title' => 'Commits Tsv',
    'description' => 'Commits statistics.',
    'page callback' => 'ppgetstat_commits_tsv_source',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'ppgetstat.pages.inc',
  );

  $items['admin/config/services/ppgetstat-reset'] = array(
    'title' => 'Reset all statistics',
    'description' => 'Clear all statistics.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ppgetstat_reset_form'),
    'access arguments' => array('administer site configuration'),
    'weight' => -21,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ppgetstat.pages.inc',
  );

  $items['admin/config/services/sync_user_list'] = array(
    'title' => 'Get users from Drupal.org',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ppgetstat_sync_user_list'),
    'access arguments' => array('administer site configuration'),
    'weight' => -21,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ppgetstat.pages.inc',
  );

  return $items;
}

/**
 * Get/set scanning period.
 *
 * @param int $months
 *   Number of months.
 *
 * @return int
 *   Timestamp.
 */
function ppgetstat_stats_period($months = NULL) {
  if (isset($months)) {
    $do = 'set';
  }
  else {
    // If value doesn't specified then work as getter.
    $do = 'get';
    // Default number of months to scan.
    // 12 years as default.
    $months = 12 * 12;
  }

  $value = $months * PPGETSTAT_TIME_MONTH_GRANULARITY;
  $result = call_user_func("variable_$do", __FUNCTION__, $value);

  return NULL === $result ? $value : $result;
}

/**
 * Check that user is already imported from D.org to database.
 *
 * @param string|int $argument
 *   Nickname or an ID of a Drupal.org user.
 *
 * @return int
 *   Node ID of a user.
 */
function ppgetstat_is_user_stored($argument) {
  $query = db_select('node', 'node')
    ->fields('node', array('nid'));

  $query->leftJoin('field_data_field_user_id', 'field', 'node.nid = field.entity_id');

  $or = db_or();
  $or->condition('field.field_user_id_value', $argument);
  $or->condition('node.title', $argument);

  // @code
  // SELECT nid
  // FROM node node
  // LEFT JOIN field_data_field_user_id field
  // ON node.nid = field.entity_id
  // WHERE node.type = 'user'
  // AND (field.field_user_id_value = '2802285' OR node.title = 'BR0kEN')
  // @endcode
  return (int) $query->condition('node.type', PPGETSTAT_USER_NODE_TYPE)
    ->condition('node.status', NODE_PUBLISHED)
    ->condition($or)
    ->execute()
    ->fetchField();
}

/**
 * @param string|int $argument
 *   Nickname or an ID of a Drupal.org user.
 *
 * @return stdClass|bool
 *   Compliance of the user ID to his personal data.
 */
function ppgetstat_get_dorg_user($argument) {
  $call = new APICall();
  $result = $call->resource('api-d7/user.json')
    ->query(array(is_numeric($argument) ? 'uid' : 'name' => $argument))
    ->execute();

  if (!empty($result->list)) {
    // Work with zero element because we're check a single user.
    return reset($result->list);
  }

  return FALSE;
}

/**
 * Parse GitHub username from Drupal.org.
 *
 * @param int $doid
 *   Drupal.org used ID.
 *
 * @return string
 *   GitHub user name.
 */
function ppgetstat_get_github_username_by_doid($doid) {
  $page = drupal_http_request("https://www.drupal.org/user/$doid");

  if (!empty($page->data)) {
    $data = new PPGetStatHTML($page->data);
    $links = $data
      ->xpath()
      ->query("//div[contains(@class, 'field-social-links')]//a[contains(@href, 'github')]/@href");

    if ($links->length > 0) {
      $url = parse_url($links[$links->length - 1]->value);

      return ltrim($url['path'], '/');
    }
  }

  return '';
}

/**
 * Implements hook_cron().
 */
function ppgetstat_cron() {
  $time_pre = microtime(TRUE);
  // Create items in stats_jobs queue.
  _ppgetstat_cron_createItem_stats_jobs();

  // Process items from stats_jobs queue.
  _ppgetstat_cron_processItem_stats_jobs();

  // Process items from stats_jobs queue.
  _ppgetstat_cron_processItem_dorg_scrapping_jobs();

  // Remove expired cached pages.
  _ppgetstat_cron_remove_cached_pages();

  $time_post = microtime(TRUE);
  $exec_time = round($time_post - $time_pre, 2);
  watchdog('ppgetstat_cron', $exec_time . 's ');

}

/**
 * If period has passed, start rescan of available users list.
 */
function _ppgetstat_cron_create_users_queue($term_id = 0) {
  // we are running users lists rescan each 2 days.
  if (variable_get('ppgetstat_last_users_rescan_timestamp') > REQUEST_TIME - 6 * 60 * 60) {
    return;
  }

  $call = new APICall();
  $call->resource('api-d7/user.json');

  $queue = DrupalQueue::get('ppgetstat_users_scan');
  $queue->createQueue();

  if ($term_id > 0) {
    $terms = array(taxonomy_term_load($term_id));
  }
  else {
    $terms = taxonomy_get_tree(taxonomy_vocabulary_machine_name_load('users_list')->vid);
  }

  foreach (array_filter($terms) as $term) {
    $field_query = field_get_items('taxonomy_term', $term, 'field_query');

    if (FALSE !== $field_query) {
      $variables = array();
      foreach ($field_query as $item) {
        $variables[$item['first']] = $item['second'];
      }

      $result = $call->query($variables)->execute();

      if (!empty($result)) {
        $last_url = parse_url($result->last);
        parse_str($last_url['query'], $params);

        for ($i = $params['page'] - 1; $i >= 0; $i--) {
          $queue->createItem(array($variables, $i));
        }
      }
    }
  }

  variable_set('ppgetstat_last_users_rescan_timestamp', REQUEST_TIME);
}

/**
 * Process users queue
 */
function _ppgetstat_cron_process_users_queue() {
  // Ð¦e are running users lists rescan each 5 minutes.
  if (variable_get('ppgetstat_last_users_process_timestamp') > REQUEST_TIME - 5 * 60) {
    return;
  }

  $queue = DrupalQueue::get('ppgetstat_users_scan');

  if ($queue->NumberOfItems() > 0) {
    $item = $queue->claimItem();

    if (!empty($item)) {
      list($variables, $page) = $item->data;
      _ppgetstat_sync_user_list_step($variables, $page);

      $queue->deleteItem($item);
    }
  }
  else {
    $queue->DeleteQueue();
  }

  variable_set('ppgetstat_last_users_process_timestamp', REQUEST_TIME);
}

/**
 * If period has passed, scan each user's commits.
 */
function _ppgetstat_cron_createItem_stats_jobs() {
  if (variable_get('ppgetstat_last_statsjobs_timestamp') > REQUEST_TIME - 24 * 60 * 60) {
    return;
  }

  $queue = DrupalQueue::get('stats_jobs');
  foreach (_ppgetstats_get_all_users() as $user_node) {
    if (!isset($user_node->field_user_id[LANGUAGE_NONE][0]['value'])) {
      continue;
    }

    // Invoke hook so all modules can use it to provide jobs.
    foreach (module_implements('ppgetstat_stats_job') as $module) {
      $job = module_invoke($module, 'ppgetstat_stats_job', $user_node);

      if (!empty($job)) {
        $queue->createItem($job);
      }
    }
  }

  variable_set('ppgetstat_last_statsjobs_timestamp', REQUEST_TIME);
}

/**
 * Implements hook_ppgetstat_stats_job().
 */
function ppgetstat_ppgetstat_stats_job($user_node) {
  $doid = $user_node->field_user_id[LANGUAGE_NONE][0]['value'];
  $last_scan_week = db_query('SELECT timestamp FROM {ppgetstat} WHERE doid = :doid AND type = :type ORDER BY timestamp DESC LIMIT 1',
    array(':doid' => $doid, ':type' => PPGETSTAT_TYPE_COMMITS)
  )->fetchField();

  $last_commit_timestamp = variable_get('ppgetstat_ppgetstat_last_commit_timestamp', array($doid => array()));

  $last_commit_timestamp[$doid] = array($last_scan_week => 0);

  $last_scan = max(array(
    REQUEST_TIME - PPGETSTAT_DEFAULT_TIME_PERIOD_FOR_SCANNING,
    $last_commit_timestamp[$doid][$last_scan_week],
  ));

  if ($last_scan > REQUEST_TIME - 24 * 60 * 60) {
    return;
  }

  $job = array(
    'generate_urls_callback' => '_ppgetstat_get_code_tracking_urls',
    'parse_pages_callback' => '_ppgetstat_parse_commits',
    'doid' => $doid,
    'last_scan' => $last_scan,
  );
  return $job;
}

/**
 * Process jobs from stats_jobs queue.
 */
function _ppgetstat_cron_processItem_stats_jobs() {
  $stats_jobs_queue = DrupalQueue::get('stats_jobs');
  $dorg_scrapping_queue = DrupalQueue::get('dorg_scrapping');
  for ($i = 0; $i < PPGETSTAT_STATSJOBS_PROCESS_NUMBER; $i++) {
    if ($stats_jobs_queue->numberOfItems() == 0) {
      break;
    }
    $item = $stats_jobs_queue->claimItem();
    if ($item == FALSE) {
      break;
    }

    $generate_urls_function = $item->data['generate_urls_callback'];
    if (!function_exists($generate_urls_function)) {
      watchdog('ppgetstat', 'generate_urls_callback ":generate_urls_callback" is not defined.', array(
        ':generate_urls_callback' => $generate_urls_function,
      ), WATCHDOG_ERROR);
      return;
    }
    foreach ($generate_urls_function($item->data) as $url) {
      // We keep the id of the stats_jobs queue to group all dorg_scrapping jobs.
      $scrapping_job = array(
        'id' => $item->item_id,
        'url' => $url,
        'data' => $item->data,
        'parse_pages_callback' => $item->data['parse_pages_callback'],
      );
      $dorg_scrapping_queue->createItem($scrapping_job);
    }

    $stats_jobs_queue->deleteItem($item);
  }
}

/**
 * Get all published user nodes.
 */
function _ppgetstats_get_all_users() {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', PPGETSTAT_USER_NODE_TYPE)
    ->propertyCondition('status', 1)
    ->execute();
  if (!empty($result)) {
    $nids = array_keys($result['node']);
    return node_load_multiple($nids);
  }
  return array();
}

/**
 * Helper function that gets current project ids by d.org ids.
 * @param array $doids
 * @return assoc array with drupal.org id => $user node object.
 */
function _ppgetstat_get_users_by_doids($doids) {

  if (empty($doids)) {
    return;
  }
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', PPGETSTAT_USER_NODE_TYPE)
    ->propertyCondition('status', 1)
    ->fieldCondition('field_user_id', 'value', $doids, 'IN')
    ->execute();

  if (empty($result)) {
    return;
  }

  $nids = array_keys($result['node']);
  $nodes = node_load_multiple($nids);
  $r = array();

  foreach ($nodes as $node) {
    $field_user_id = field_get_items('node', $node, 'field_user_id');
    $r[$field_user_id[0]['value']] = $node;
  }

  return $r;
}

/**
 * Get the user's node link by drupal.org id.
 */
function _ppgetstat_get_node_link_by_doid($doid) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', PPGETSTAT_USER_NODE_TYPE)
    ->propertyCondition('status', 1)
    ->fieldCondition('field_user_id', 'value', $doid)
    ->execute();
  if (empty($result)) {
    return;
  }
  $result_keys = array_keys($result['node']);
  $nid = reset($result_keys);

  $node = node_load($nid);

  return l($node->title, 'node/' . $nid);
}

/**
 * Generate list of URLs for scanning the code.
 */
function _ppgetstat_get_code_tracking_urls($data) {
  $last_scan = $data['last_scan'];
  $doid = $data['doid'];
  // Number of pages to scan before check it is empty.
  $pages_block = 7;
  $urls = array();

  $first_url = 'https://drupal.org/user/' . urlencode($doid) . '/track/code?page=0';
  $content = _ppgetstat_fetch_page($first_url);
  $start = 0;
    if (strpos($content, 'commitlog')) {
    for ($i = $start; $i <= ($start + $pages_block); $i++) {
      if ($i == ($start + $pages_block)) {
        $first_url = 'https://drupal.org/user/' . urlencode($doid) . '/track/code?page=' . $i;
        $content = _ppgetstat_fetch_page($first_url);
        if (!strpos($content, 'commitlog')) {
          return $urls;
        }
        else {
          $start = $start + $pages_block;
        }
      }
      $urls[] = 'https://drupal.org/user/' . urlencode($doid) . '/track/code?page=' . $i;
    }
  }

  return $urls;
}

/**
 * Process jobs from dorg_scrapping queue.
 */
function _ppgetstat_cron_processItem_dorg_scrapping_jobs() {
  $dorg_scrapping_queue = DrupalQueue::get('dorg_scrapping');
  for ($i = 0; $i < PPGETSTAT_DORGSCRAPPING_PROCESS_NUMBER; $i++) {
    $queue_item = $dorg_scrapping_queue->claimItem();
    if ($queue_item == FALSE) {
      return;
    }

    $function = $queue_item->data['parse_pages_callback'];
    if (!function_exists($function)) {
      watchdog('ppgetstat', 'parse_pages_callback ":parse_pages_callback" is not defined.', array(
        ':parse_pages_callback' => $function,
      ), WATCHDOG_ERROR);
      return;
    }

    $page_content = _ppgetstat_fetch_page($queue_item->data['url']);

    try {
      $result = $function($page_content, $queue_item->data['data']);
    }
    catch (Exception $e) {
      watchdog_exception('ppgetstat', $e);
      $result = FALSE;
    }

    if ($result === FALSE) {
      _ppgetstat_cleanup_dorg_scrapping_queue($queue_item->data['id']);
    }

    if (!empty($result)) {
      _ppgetstat_save_counters($result, $queue_item->data['data']['doid']);
    }

    $dorg_scrapping_queue->deleteItem($queue_item);
  }
}

/**
 * Cleanup the dorg_scrapping queue.
 */
function _ppgetstat_cleanup_dorg_scrapping_queue($id) {
  $dorg_scrapping_queue = DrupalQueue::get('dorg_scrapping');
  while ($queue_item = $dorg_scrapping_queue->claimItem()) {
    if ($queue_item->data['id'] == $id) {
      $dorg_scrapping_queue->deleteItem($queue_item);
    }
    else {
      $dorg_scrapping_queue->releaseItem($queue_item);
      return;
    }
  }
}

/**
 * Retrieve content of the page.
 *
 * @param string $url
 *   URL of the page to retrieve.
 */
function _ppgetstat_fetch_page($url) {
  $time_pre = microtime(TRUE);

  // This hack should be debugged. Can't really find where improper url generated.
  $url = preg_replace("/comment\?/", "comment.json?", $url);
  $url = preg_replace("/comment.json\?name=/", "comment.json?author=", $url);
  $filename = preg_replace("/[^A-Za-z0-9]/", '-', $url) . '.html';
  $filepath = file_default_scheme() . '://page_cache/' . $filename;
  $cache = cache_get($filepath);
  $content = isset($cache->data) ? $cache->data : NULL;
  if (!$content) {
    if (file_exists($filepath)) {
      $url = $filepath;
    }

    $content = file_get_contents($url);

    if ($url != $filepath) {
      if (file_put_contents($filepath, $content) === FALSE) {
        watchdog('ppgetstat', 'Can\'t write cache file %file.', array('%file' => $filepath), WATCHDOG_ERROR);
      }
      else cache_set($filepath, $content);
    }
  }


  $time_post = microtime(TRUE);
  $exec_time = round($time_post - $time_pre, 2);
  watchdog('_ppgetstat_fetch_page', $exec_time . 's ' . $url);
  return $content;
}

/**
 * Remove expired cached pages.
 */
function _ppgetstat_cron_remove_cached_pages() {
  $cache_directory = drupal_realpath(file_default_scheme() . '://page_cache');
  $files = glob($cache_directory . '/*');
  foreach ($files as $file) {
    if (is_file($file)) {
      if (REQUEST_TIME - filemtime($file) >= PPGETSTAT_PAGE_CACHE_EXPIRY) {
        unlink($file);
      }
    }
  }
}

/**
 * Parse the page for the commits.
 */
function _ppgetstat_parse_commits($page_content, $data) {
  $last_scan = $data['last_scan'];
  if (empty($page_content)) {
    throw new Exception('Empty page content.');
  }

  // Extract string with project name and date of the commit.
  // Example: <h3><a href="/project/apachesolr">Apache Solr Search</a>: <a href="/commitlog/commit/4838/9d8d6276d4246a0d2651b00bbd05786baa1324c9">October 7, 2013 20:40</a></h3>
  $strings = htmlqp($page_content, '.commit-global h3');

  if (empty($strings)) {
    throw new Exception(t('Page does not have any ".commit-global h3" elements.'));
  }

  $first_commit_timestamp = TRUE;
  $commits_counter_array = array();
  $commits_counter = 0;

  foreach ($strings as $string) {
    $html = $string->html();
    $commit_timestamp = _ppgetstat_parse_commits_page_date($html);
    $commit_hash = _ppgetstat_parse_commits_page_hash($html);
    if ($commit_timestamp <= $last_scan) {
      break;
    }

    $period_timestamp = $commit_timestamp - ($commit_timestamp % PPGETSTAT_TIME_WEEK_GRANULARITY);
    $last_commits = variable_get('ppgetstat_ppgetstat_last_commit_timestamp', array($data['doid'] => array($period_timestamp => 0)));

    // Save latest commit's date per week into variable.
    if ($first_commit_timestamp || empty($last_commits[$data['doid']][$period_timestamp])) {
      $first_commit_timestamp = FALSE;

      if (empty($last_commits[$data['doid']][$period_timestamp]) || $commit_timestamp > $last_commits[$data['doid']][$period_timestamp]) {
        $last_commits[$data['doid']][$period_timestamp] = $commit_timestamp;
        variable_set('ppgetstat_ppgetstat_last_commit_timestamp', $last_commits);
      }
    }

    if (!isset($commits_counter_array[$period_timestamp])) {
      // $commits_counter_array[$period_timestamp] = 0;
    }
    $commits_counter_array[$period_timestamp][] = $commit_hash;
    $commits_counter++;
  }

  // FALSE means stop scrapping any other pages anymore.
  if ($commits_counter == 0) {
    return FALSE;
  }

  $commits_counter_array['#type'] = PPGETSTAT_TYPE_COMMITS;

  return $commits_counter_array;
}

/**
 * Save counters to database.
 */
function _ppgetstat_save_counters($counters_array, $doid) {
  $type = $counters_array['#type'];
  unset($counters_array['#type']);

  foreach ($counters_array as $period => &$commits) {
    foreach ($commits as &$hash) {
      db_merge('ppgetstat')
        ->key(array('doid' => $doid, 'hash' => $hash))
        ->fields(array('type' => $type, 'timestamp' => $period, 'items' => 1))
        ->execute();
    }

  }
}

/**
 * Parse string '<h3><a href="/project/apachesolr">Apache Solr Search</a>: <a href="/commitlog/commit/4838/9d8d6276d4246a0d2651b00bbd05786baa1324c9">October 7, 2013 20:40</a></h3>'.
 */
function _ppgetstat_parse_commits_page_date($original_string) {
  list(, $string) = explode('a>: <a href', $original_string);

  // Cut off remainig part of the link tag in the beginning.
  $string = substr($string, strpos($string, '>') + 1);
  // Remove "</a></h3>" from the end of the string.
  $string = substr($string, 0, strlen($string) - 9);

  $timestamp = strtotime($string);

  if (empty($timestamp)) {
    throw new Exception(t('Cannot parse string %string to timestamp.', array('%string' => $original_string)));
  }
  return $timestamp;
}

/**
 * Parse string '<h3><a href="/project/apachesolr">Apache Solr Search</a>: <a href="/commitlog/commit/4838/9d8d6276d4246a0d2651b00bbd05786baa1324c9">October 7, 2013 20:40</a></h3>'.
 */
function _ppgetstat_parse_commits_page_hash($original_string) {

  preg_match("/.*\/commitlog\/commit\/.*\/(.*)\">/", $original_string, $match);
  if (!isset($match[1])) {
    throw new Exception(t('Cannot parse string %string to get commit hash.', array('%string' => $original_string)));
  }

  return $match[1];
}

/**
 * Access callback for commits tab.
 */
function ppgetstat_commits_access($node) {
  return ($node->type == PPGETSTAT_USER_NODE_TYPE);
}

/**
 * Add d3.js only once.
 */
function _ppgetstat_add_d3_js() {
  $added = &drupal_static(__FUNCTION__);
  if (!$added) {
    drupal_add_js(drupal_get_path('module', 'ppgetstat') . '/js/d3.min.js');
    $added = TRUE;
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ppgetstat_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_node_insert().
 *
 * Trigger scanning jobs for newly created user.
 */
function ppgetstat_node_insert($node) {
  if ($node->type != PPGETSTAT_USER_NODE_TYPE) {
    return;
  }
  if (!isset($node->field_user_id[LANGUAGE_NONE][0]['value'])) {
    return;
  }
  $queue = DrupalQueue::get('stats_jobs');
  // Invoke hook so all modules can use it to provide jobs.
  foreach (module_implements('ppgetstat_stats_job') as $module) {
    $job = module_invoke($module, 'ppgetstat_stats_job', $node);
    if (!empty($job)) {
      $queue->createItem($job);
    }
  }

  // Queue scanning jobs.
  _ppgetstat_cron_processItem_stats_jobs();
}

/**
 * Batch step function for syncing user list.
 */
function _ppgetstat_sync_user_list_step($variables, $page) {
  $call = new APICall();
  $call->resource('api-d7/user.json');

  for ($i = 0; $i < 10; $i++) {
    $result = $call->query($variables)->page($page)->execute();

    if (!empty($result)) {
      // Process list and add/update user nodes.
      _ppgetstat_process_dorg_users($result->list);
      break;
    }
    else {
      watchdog('ppdorg_debug', t('An error returned during request.'));
    }

    // Wait for next 10 seconds to retry.
    sleep(10);
  }
}

/**
 * Helper function that process d.org users list and add/update that object to
 * user nodes.
 *
 * @param stdClass[] $users_data
 *
 * @throws \Exception
 */
function _ppgetstat_process_dorg_users(array $users_data) {
  // Restructure an array with users data.
  foreach ($users_data as $i => $data) {
    unset($users_data[$i]);

    if (isset($data->uid)) {
      $users_data[$data->uid] = $data;
    }
  }

  // @code
  // array(
  //   '<DORG_UID>' => '<NID>',
  // );
  // @endcode
  $existed_users = db_select('field_data_field_user_id', 'u')
    ->fields('u', array('field_user_id_value', 'entity_id'))
    ->condition('field_user_id_value', array_keys($users_data))
    ->execute()
    ->fetchAll(PDO::FETCH_KEY_PAIR|PDO::FETCH_GROUP);

  foreach ($users_data as $uid => $data) {
    // If user is not tracked yet - creating new empty node.
    if (isset($existed_users[$uid])) {
      $node = node_load($existed_users[$uid]);
    }
    else {
      $node = new stdClass();
      $node->type = PPGETSTAT_USER_NODE_TYPE;

      node_object_prepare($node);
    }

    $node->title = $data->name;

    foreach (array(
      'field_user_id' => $uid,
      'field_github_username' => ppgetstat_get_github_username_by_doid($uid),
    ) as $field_name => $value) {
      $node->{$field_name}[LANGUAGE_NONE] = array(array('value' => $value));
    }

    if (!empty($data->field_organizations)) {
      foreach ($data->field_organizations as $organization)  {
        $collection_request = drupal_http_request($organization->uri. '.json');

        if (200 == $collection_request->code) {
          $collection_data = json_decode($collection_request->data);
          // Processing user companies.
          $node->field_organisations[LANGUAGE_NONE][] = _ppgetstat_vocab_term_tid($collection_data->field_organization_name, 'company');
          // Processing user job titles.
          $node->field_job_titles[LANGUAGE_NONE][] = _ppgetstat_vocab_term_tid($collection_data->field_job_title, 'job_title');
        }
      }
    }

    node_save($node);
  }
}

/**
 * Helper function that generates term id for adding it to user CT term references.
 */
function _ppgetstat_vocab_term_tid($name, $vocab_name) {
  $vocab = taxonomy_vocabulary_machine_name_load($vocab_name);
  $name = trim(strtolower($name));
  $tid = db_select('taxonomy_term_data', 't')
    ->fields('t', array('tid'))
    ->condition('vid', $vocab->vid)
    ->condition('name', $name)
    ->execute()
    ->fetchField();

  if (empty($tid)) {
    $term = (object) array(
      'vid' => $vocab->vid,
      'name' => $name,
      'vocabulary_machine_name' => $vocab_name,
    );

    // If term will not be saved directly then we'll get duplicates.
    taxonomy_term_save($term);

    return array('tid' => $term->tid);
  }

  return array('tid' => $tid);
}

/**
 * Helper function that get info about individual membership.
 */
function _ppgetstat_get_individual_members() {
  $cache = cache_get('pp_frontpage_assoc_members');

  if (empty($cache)) {
    $call = new APICall('https://assoc.drupal.org');
    $result = $call->resource('api/association_members.json')->execute();

    if (!empty($result)) {
      $stats = array(
        'members_country' => array(),
        'members_country_count' => array(),
      );

      foreach ($result->users as $item) {
        $country = trim($item->user->Country);

        if (empty($country) || 1 == $country) {
          $country = 'COUNTRY_NOT_DEFINED';
        }

        if (empty($stats['members_country_count'][$country])) {
          $stats['members_country_count'][$country] = 0;
        }

        $stats['members_country_count'][$country] += 1;
        $stats['members_country'][$country][] = $item->user->user_name;
      }

      array_multisort($stats['members_country_count'], SORT_DESC, SORT_NUMERIC);
      cache_set('pp_frontpage_assoc_members', $stats);

      return $stats;
    }
  }

  return $cache->data;
}

/**
 * Finish callback for batch process.
 */
function _ppgetstat_batch_finished() {
  drupal_set_message('Users import finished');
}
