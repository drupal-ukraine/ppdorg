<?php

/**
 * @file
 * Drupal.org statistics routines.
 */

define('PPGETSTAT_USER_NODE_TYPE', 'user');
// Number of users queued to be scanned per cron run.
define('PPGETSTAT_STATSJOBS_PROCESS_NUMBER', 100);
// Number of calls to drupal.org per cron run.
define('PPGETSTAT_DORGSCRAPPING_PROCESS_NUMBER', 100);
// If no stats available we scan commits for last half a year.
define('PPGETSTAT_DEFAULT_TIME_PERIOD_FOR_SCANNING', variable_get('ppgetstat_stats_period', 6 * 30 * 24 * 60 * 60));
// We group statistics per week.
define('PPGETSTAT_TIME_PERIOD_GRANULARITY', 7 * 24 * 60 * 60);
// Commmits type of data.
define('PPGETSTAT_TYPE_COMMITS', 1);
// Page cache expiry time.
define('PPGETSTAT_PAGE_CACHE_EXPIRY', 6 * 60 * 60);

/**
 * Implements hook_menu().
 */
function ppgetstat_menu() {
  $items['node/%node/commits'] = array(
    'title' => 'Commits',
    'description' => 'Commits statistics.',
    'page callback' => 'ppgetstat_commits_page',
    'page arguments' => array(1),
    'access callback' => 'ppgetstat_commits_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ppgetstat.pages.inc',
  );

  $items['node/%node/commits/data.tsv'] = array(
    'title' => 'Commits Tsv',
    'description' => 'Commits statistics.',
    'page callback' => 'ppgetstat_commits_tsv_source',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'ppgetstat.pages.inc',
  );

  $items['admin/config/services/ppgetstat-reset'] = array(
    'title' => 'Reset all statistics',
    'description' => 'Clear all statistics.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ppgetstat_reset_form'),
    'access arguments' => array('administer site configuration'),
    'weight' => -21,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ppgetstat.pages.inc',
  );

  return $items;
}

/**
 * Get drupal.org user ID using nickname and http://dgo.to.
 *
 * @param string $nick
 *   Nickname.
 *
 * @return int
 *   Drupal.org user id.
 */
function ppgetstat_get_id_by_nick($nick) {
  if ($id_cached = cache_get('ppgetstat_nick_' . $nick)) {
    return $id_cached->data;
  }
  $nick_data = drupal_http_request('http://dgo.to/@' . $nick);
  $request = parse_url($nick_data->redirect_url);
  $id_data = explode("/", $request['path']);
  $id = $id_data[2];

  if (!is_numeric($id)) {
    return FALSE;
  }

  cache_set('ppgetstat_nick_' . $nick, $id);

  return $id;
}

/**
 * Get drupal.org user Nickname using uid and https://www.drupal.org/user/.
 *
 * @param string|int $id
 *   User drupal.org Id.
 *
 * @return bool|string
 *   User drupal.org nickname or FALSE if not user was found.
 */
function ppgetstat_get_nick_by_id($id) {
  $userdata = drupal_http_request('https://www.drupal.org/user/' . $id);

  if ($userdata->code > 400) {
    return FALSE;
  }

  preg_match('/\<h1 id\=\"page-title\" class\=\"title\"\>(.+)\<\/h1\>/', $userdata->data, $match);

  return (!empty($match[1]) ? $match[1] : FALSE);
}

/**
 * Implements hook_cron().
 */
function ppgetstat_cron() {

  // Create items in stats_jobs queue.
  _ppgetstat_cron_createItem_stats_jobs();

  // Process items from stats_jobs queue.
  _ppgetstat_cron_processItem_stats_jobs();

  // Process items from stats_jobs queue.
  _ppgetstat_cron_processItem_dorg_scrapping_jobs();

  // Remove expired cached pages.
  _ppgetstat_cron_remove_cached_pages();
}

/**
 * If period has passed, scan each user's commits.
 */
function _ppgetstat_cron_createItem_stats_jobs() {
  $last_cron_run = variable_get('ppgetstat_last_statsjobs_timestamp');

  if ($last_cron_run > REQUEST_TIME - 24 * 60 * 60) {
    return;
  }

  $queue = DrupalQueue::get('stats_jobs');
  foreach (_ppgetstats_get_all_users() as $user_node) {
    if (!isset($user_node->field_user_id[LANGUAGE_NONE][0]['value'])) {
      continue;
    }

    // Invoke hook so all modules can use it to provide jobs.
    foreach (module_implements('ppgetstat_stats_job') as $module) {
      $job = module_invoke($module, 'ppgetstat_stats_job', $user_node);
      if (!empty($job)) {
        $queue->createItem($job);
      }
    }
  }

  variable_set('ppgetstat_last_statsjobs_timestamp', REQUEST_TIME);
}

/**
 * Implements hook_ppgetstat_stats_job().
 */
function ppgetstat_ppgetstat_stats_job($user_node) {
  $doid = $user_node->field_user_id[LANGUAGE_NONE][0]['value'];
  $last_scan_week = db_query('SELECT timestamp FROM {ppgetstat} WHERE doid = :doid AND type = :type ORDER BY timestamp DESC LIMIT 1',
    array(':doid' => $doid, ':type' => PPGETSTAT_TYPE_COMMITS)
  )->fetchField();

  $last_commit_timestamp = variable_get('ppgetstat_ppgetstat_last_commit_timestamp', array($doid => array()));

  $last_commit_timestamp[$doid] += array($last_scan_week => 0);

  $last_scan = max(array(
    REQUEST_TIME - PPGETSTAT_DEFAULT_TIME_PERIOD_FOR_SCANNING,
    $last_commit_timestamp[$doid][$last_scan_week],
  ));

  if ($last_scan > REQUEST_TIME - 24 * 60 * 60) {
    return;
  }

  $job = array(
    'generate_urls_callback' => '_ppgetstat_get_code_tracking_urls',
    'parse_pages_callback' => '_ppgetstat_parse_commits',
    'doid' => $doid,
    'last_scan' => $last_scan,
  );
  return $job;
}

/**
 * Process jobs from stats_jobs queue.
 */
function _ppgetstat_cron_processItem_stats_jobs() {
  $stats_jobs_queue = DrupalQueue::get('stats_jobs');
  $dorg_scrapping_queue = DrupalQueue::get('dorg_scrapping');
  for ($i = 0; $i < PPGETSTAT_STATSJOBS_PROCESS_NUMBER; $i++) {
    if ($stats_jobs_queue->numberOfItems() == 0) {
      break;
    }
    $item = $stats_jobs_queue->claimItem();
    if ($item == FALSE) {
      break;
    }

    $generate_urls_function = $item->data['generate_urls_callback'];
    if (!function_exists($generate_urls_function)) {
      watchdog('ppgetstat', 'generate_urls_callback ":generate_urls_callback" is not defined.', array(
        ':generate_urls_callback' => $generate_urls_function,
      ), WATCHDOG_ERROR);
      return;
    }
    foreach ($generate_urls_function($item->data) as $url) {
      // We keep the id of the stats_jobs queue to group all dorg_scrapping jobs.
      $scrapping_job = array(
        'id' => $item->item_id,
        'url' => $url,
        'data' => $item->data,
        'parse_pages_callback' => $item->data['parse_pages_callback'],
      );
      $dorg_scrapping_queue->createItem($scrapping_job);
    }

    $stats_jobs_queue->deleteItem($item);
  }
}

/**
 * Get all published user nodes.
 */
function _ppgetstats_get_all_users() {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', PPGETSTAT_USER_NODE_TYPE)
    ->propertyCondition('status', 1)
    ->execute();
  if (!empty($result)) {
    $nids = array_keys($result['node']);
    return node_load_multiple($nids);
  }
  return array();
}


/**
 * Get the user's node link by drupal.org id.
 */
function _ppgetstat_get_node_link_by_doid($doid) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', PPGETSTAT_USER_NODE_TYPE)
    ->propertyCondition('status', 1)
    ->fieldCondition('field_user_id', 'value', $doid)
    ->execute();
  if (empty($result)) {
    return;
  }
  $result_keys = array_keys($result['node']);
  $nid = reset($result_keys);

  $node = node_load($nid);

  return l($node->title, 'node/' . $nid);
}

/**
 * Generate list of URLs for scanning the code.
 */
function _ppgetstat_get_code_tracking_urls($data) {
  $last_scan = $data['last_scan'];
  $doid = $data['doid'];
  // In worst scenario we expect person to do one page (25 commits)
  // of commits every six hours.
  $days_number = round((REQUEST_TIME - $last_scan) / (6 * 60 * 60));
  $urls = array();
  for ($i = 0; $i < $days_number; $i++) {
    $urls[] = 'https://drupal.org/user/' . $doid . '/track/code?page=' . $i;
  }
  return $urls;
}

/**
 * Process jobs from dorg_scrapping queue.
 */
function _ppgetstat_cron_processItem_dorg_scrapping_jobs() {
  $dorg_scrapping_queue = DrupalQueue::get('dorg_scrapping');
  for ($i = 0; $i < PPGETSTAT_DORGSCRAPPING_PROCESS_NUMBER; $i++) {
    $queue_item = $dorg_scrapping_queue->claimItem();
    if ($queue_item == FALSE) {
      return;
    }

    $function = $queue_item->data['parse_pages_callback'];
    if (!function_exists($function)) {
      watchdog('ppgetstat', 'parse_pages_callback ":parse_pages_callback" is not defined.', array(
        ':parse_pages_callback' => $function,
      ), WATCHDOG_ERROR);
      return;
    }

    $page_content = _ppgetstat_fetch_page($queue_item->data['url']);

    try {
      $result = $function($page_content, $queue_item->data['data']);
    }
    catch (Exception $e) {
      watchdog_exception('ppgetstat', $e);
      $result = FALSE;
    }

    if ($result === FALSE) {
      _ppgetstat_cleanup_dorg_scrapping_queue($queue_item->data['id']);
    }

    if (!empty($result)) {
      _ppgetstat_save_counters($result, $queue_item->data['data']['doid']);
    }

    $dorg_scrapping_queue->deleteItem($queue_item);
  }
}

/**
 * Cleanup the dorg_scrapping queue.
 */
function _ppgetstat_cleanup_dorg_scrapping_queue($id) {
  $dorg_scrapping_queue = DrupalQueue::get('dorg_scrapping');
  while ($queue_item = $dorg_scrapping_queue->claimItem()) {
    if ($queue_item->data['id'] == $id) {
      $dorg_scrapping_queue->deleteItem($queue_item);
    }
    else {
      $dorg_scrapping_queue->releaseItem($queue_item);
      return;
    }
  }
}

/**
 * Retrieve content of the page.
 *
 * @param string $url
 *   URL of the page to retrieve.
 */
function _ppgetstat_fetch_page($url) {
  $time_pre = microtime(TRUE);

  $filename = preg_replace("/[^A-Za-z0-9]/", '-', $url) . '.html';
  $filepath = file_default_scheme() . '://page_cache/' . $filename;
  if (file_exists($filepath)) {
    $url = $filepath;
  }

  $content = file_get_contents($url);

  if ($url != $filepath) {
    if (file_put_contents($filepath, $content) === FALSE) {
      watchdog('ppgetstat', 'Can\'t write cache file %file.', array('%file' => $filepath), WATCHDOG_ERROR);
    }
  }

  $time_post = microtime(TRUE);
  $exec_time = round($time_post - $time_pre, 2);
  watchdog('_ppgetstat_fetch_page', $exec_time . 's ' . $url);
  return $content;
}

/**
 * Remove expired cached pages.
 */
function _ppgetstat_cron_remove_cached_pages() {
  $cache_directory = drupal_realpath(file_default_scheme() . '://page_cache');
  $files = glob($cache_directory . '/*');
  foreach ($files as $file) {
    if (is_file($file)) {
      if (REQUEST_TIME - filemtime($file) >= PPGETSTAT_PAGE_CACHE_EXPIRY) {
        unlink($file);
      }
    }
  }
}

/**
 * Parse the page for the commits.
 */
function _ppgetstat_parse_commits($page_content, $data) {
  $last_scan = $data['last_scan'];
  if (empty($page_content)) {
    throw new Exception('Empty page content.');
  }

  // Extract string with project name and date of the commit.
  // Example: <h3><a href="/project/apachesolr">Apache Solr Search</a>: <a href="/commitlog/commit/4838/9d8d6276d4246a0d2651b00bbd05786baa1324c9">October 7, 2013 20:40</a></h3>
  $strings = htmlqp($page_content, '.commit-global h3');

  if (empty($strings)) {
    throw new Exception(t('Page does not have any ".commit-global h3" elements.'));
  }

  $first_commit_timestamp = TRUE;
  $commits_counter_array = array();
  $commits_counter = 0;

  foreach ($strings as $string) {
    $commit_timestamp = _ppgetstat_parse_commits_page_date($string->html());

    if ($commit_timestamp <= $last_scan) {
      break;
    }

    $period_timestamp = $commit_timestamp - ($commit_timestamp % PPGETSTAT_TIME_PERIOD_GRANULARITY);
    $last_commits = variable_get('ppgetstat_ppgetstat_last_commit_timestamp', array($data['doid'] => array($period_timestamp => 0)));

    // Save latest commit's date per week into variable.
    if ($first_commit_timestamp || empty($last_commits[$data['doid']][$period_timestamp])) {
      $first_commit_timestamp = FALSE;

      if (empty($last_commits[$data['doid']][$period_timestamp]) || $commit_timestamp > $last_commits[$data['doid']][$period_timestamp]) {
        $last_commits[$data['doid']][$period_timestamp] = $commit_timestamp;
        variable_set('ppgetstat_ppgetstat_last_commit_timestamp', $last_commits);
      }
    }

    if (!isset($commits_counter_array[$period_timestamp])) {
      $commits_counter_array[$period_timestamp] = 0;
    }
    $commits_counter_array[$period_timestamp]++;
    $commits_counter++;
  }

  // FALSE means stop scrapping any other pages anymore.
  if ($commits_counter == 0) {
    return FALSE;
  }

  $commits_counter_array['#type'] = PPGETSTAT_TYPE_COMMITS;

  return $commits_counter_array;
}

/**
 * Save counters to database.
 */
function _ppgetstat_save_counters($counters_array, $doid) {
  $type = $counters_array['#type'];
  unset($counters_array['#type']);

  // SQL queries to update counters.
  $periods = array_keys($counters_array);
  $db_records = db_query('SELECT timestamp, items FROM {ppgetstat} WHERE doid = :doid AND timestamp IN (:periods) AND type = :type',
    array(
      ':doid' => $doid,
      ':periods' => $periods,
      ':type' => $type,
    )
  )->fetchAllKeyed();
  foreach ($counters_array as $period => &$items) {
    $keys = array();
    if (isset($db_records[$period])) {
      $items += $db_records[$period];
      $keys = array('doid', 'timestamp', 'type');
    }
    $record = array(
      'doid' => $doid,
      'items' => $items,
      'timestamp' => $period,
      'type' => $type,
    );
    drupal_write_record('ppgetstat', $record, $keys);
  }
}

/**
 * Parse string '<h3><a href="/project/apachesolr">Apache Solr Search</a>: <a href="/commitlog/commit/4838/9d8d6276d4246a0d2651b00bbd05786baa1324c9">October 7, 2013 20:40</a></h3>'.
 */
function _ppgetstat_parse_commits_page_date($original_string) {
  list(, $string) = explode('a>: <a href', $original_string);

  // Cut off remainig part of the link tag in the beginning.
  $string = substr($string, strpos($string, '>') + 1);
  // Remove "</a></h3>" from the end of the string.
  $string = substr($string, 0, strlen($string) - 9);

  $timestamp = strtotime($string);

  if (empty($timestamp)) {
    throw new Exception(t('Cannot parse string %string to timestamp.', array('%string' => $original_string)));
  }
  return $timestamp;
}

/**
 * Access callback for commits tab.
 */
function ppgetstat_commits_access($node) {
  return ($node->type == PPGETSTAT_USER_NODE_TYPE);
}

/**
 * Add d3.js only once.
 */
function _ppgetstat_add_d3_js() {
  $added = &drupal_static(__FUNCTION__);
  if (!$added) {
    drupal_add_js(drupal_get_path('module', 'ppgetstat') . '/js/d3.min.js');
    $added = TRUE;
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ppgetstat_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_node_insert().
 *
 * Trigger scanning jobs for newly created user.
 */
function ppgetstat_node_insert($node) {
  if ($node->type != PPGETSTAT_USER_NODE_TYPE) {
    return;
  }
  if (!isset($node->field_user_id[LANGUAGE_NONE][0]['value'])) {
    return;
  }
  $queue = DrupalQueue::get('stats_jobs');
  // Invoke hook so all modules can use it to provide jobs.
  foreach (module_implements('ppgetstat_stats_job') as $module) {
    $job = module_invoke($module, 'ppgetstat_stats_job', $node);
    if (!empty($job)) {
      $queue->createItem($job);
    }
  }

  // Queue scanning jobs.
  _ppgetstat_cron_processItem_stats_jobs();
}

/**
 * Implements hook_node_delete().
 *
 * Delete ppgetstat table entry if related d.org user was deleted.
 */
function ppgetstat_node_delete($node) {
  if ($node->type == 'user' && !empty($node->field_user_id[LANGUAGE_NONE][0]['value'])) {
    db_delete('ppgetstat')
      ->condition('doid', $node->field_user_id[LANGUAGE_NONE][0]['value'])
      ->execute();
  }
}
